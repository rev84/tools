// Generated by CoffeeScript 1.12.6
var generateString, scroll;

window.CONST = {
  LS_FONT_SIZE: 'telopper_font_size',
  LS_SPEED: 'telopper_speed',
  LS_FONT_FAMILY: 'telopper_font_family',
  LS_END_SPACE: 'telopper_end_space'
};

$().ready(function() {
  $('#execute').on('click', scroll);
  $('#font_family').on('change', function() {
    return Utl.setLs(window.CONST.LS_FONT_FAMILY, $(this).val());
  });
  if (Utl.getLs(window.CONST.LS_FONT_FAMILY) !== null) {
    $('#font_family').val(Utl.getLs(window.CONST.LS_FONT_FAMILY));
  }
  $('#end_space').on('change', function() {
    return Utl.setLs(window.CONST.LS_END_SPACE, $(this).val());
  });
  if (Utl.getLs(window.CONST.LS_END_SPACE) !== null) {
    $('#end_space').val(Utl.getLs(window.CONST.LS_END_SPACE));
  }
  $('#font_size').on('change', function() {
    return Utl.setLs(window.CONST.LS_FONT_SIZE, $(this).val());
  });
  if (Utl.getLs(window.CONST.LS_FONT_SIZE) !== null) {
    $('#font_size').val(Utl.getLs(window.CONST.LS_FONT_SIZE));
  }
  $('#speed').on('change', function() {
    return Utl.setLs(window.CONST.LS_SPEED, $(this).val());
  });
  if (Utl.getLs(window.CONST.LS_SPEED) !== null) {
    return $('#speed').val(Utl.getLs(window.CONST.LS_SPEED));
  }
});

scroll = function() {
  var fontSize;
  fontSize = Number($('#font_size').val());
  $('#scroll_space').css('height', '' + (fontSize * 1.5) + 'px');
  $('#scroll_space').html('');
  return generateString(content);
};

generateString = function() {
  var color, content, divWidth, fontFamily, fontSize, isOutline, mSec, span, spanWidth, speed;
  divWidth = $('#scroll_space').width();
  fontSize = Number($('#font_size').val());
  speed = Number($('#speed').val());
  content = $('#content').val().replace(/\n/gi, '&nbsp;') + '&nbsp;'.repeat(Number($('#end_space').val()));
  color = $('#color').val();
  fontFamily = $('#font_family').val();
  isOutline = $('#outline').prop('checked');
  span = $('<span>').addClass('scroll_body').html(content).css('font-size', '' + fontSize + 'px').css('left', '' + divWidth + 'px').css('color', color).css('font-family', fontFamily).attr('data-generated', 0);
  if (isOutline) {
    span.addClass('outline');
  }
  $('#scroll_space').append(span);
  spanWidth = span.width();
  mSec = (divWidth + spanWidth) / speed * 1000;
  return span.animate({
    left: '-' + spanWidth + 'px'
  }, {
    duration: mSec,
    easing: 'linear',
    step: function() {
      var left, myWidth;
      divWidth = $('#scroll_space').width();
      myWidth = $(this).width();
      left = Number($(this).css('left').replace('px', ''));
      if (left + myWidth < divWidth && (Number($(this).attr('data-generated')) === 0)) {
        $(this).attr('data-generated', 1);
        return window.generateString();
      }
    },
    complete: function() {
      return $(this).remove();
    }
  });
};
